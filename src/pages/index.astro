---
export const prerender = false;

import Navbar from "../components/Navbar.astro";
import AspectSelector from "../components/AspectSelector.jsx";
import NicknameInput from "../components/NicknameInput.astro";
import PlayButton from "../components/PlayButton.jsx";
import Logo from "../components/Logo.astro";
import Layout from "../layouts/Layout.astro";
import FooterLinks from "../components/FooterLinks.astro";
import SeasonPassButton from "../components/SeasonPassButton.jsx";
---

<Layout />
<div class="navbar-container">
  <Navbar />
</div>
<main class="main-container">
  <div class="column left-column">
    <AspectSelector client:only />
  </div>
  
  <div class="column center-column">
    <div class="logo-container">
      <Logo />
    </div>
    <div class="form-container">
      <div id="nickname-container" style="display: none;">
        <NicknameInput />
      </div>
      <PlayButton client:only/>
    </div>
    
  </div>
  
  <div class="column right-column">
    <div class="season-pass-button" id="season-pass-button-container" style="display: block;">
      <SeasonPassButton  client:only />
    </div>
    <div class="footer-links-buttons" id="footer-links-buttons" >
      <FooterLinks />
    </div>
  </div>
</main>

<script>
  import { getCookie } from "../utils/cookies";
  import { checkPrivate } from "../utils/checkPrivate";

  await checkPrivate(); // Verifica si el usuario está autenticado antes de cargar el contenido
  
  function generateUUID() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0;
      const v = c === 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  }

  document.cookie = `skin=Aspecto Básico.png; path=/; SameSite=Lax;`
  document.cookie = 'gameId=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC; SameSite=Lax;';
  document.cookie = 'LeaderID=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC; SameSite=Lax;';

  document.addEventListener('DOMContentLoaded', () => {
    const nicknameContainer = document.getElementById('nickname-container');  
    const seasonPassButtonContainer = document.getElementById('season-pass-button-container');
    if (nicknameContainer && seasonPassButtonContainer) { // Verifica si el elemento no es null
      const accessToken = getCookie('accessToken');
      console.log("Valor de accessToken:", accessToken); // Verifica el valor de la cookie
      const isAuthenticated = !!accessToken;
      if (!isAuthenticated) {
        // Guardar un id aleatorio en la cookie
        const uuid = generateUUID();
        document.cookie = `PlayerID=${uuid}; path=/; SameSite=Lax;`;
        console.log("Usuario autenticado:", isAuthenticated);
        nicknameContainer.style.display = "block";
        seasonPassButtonContainer.style.display = "none"; // Oculta el botón de pase de temporada
      }
    }
  });
</script>

<style>
/* Fondo de toda la pantalla */
html, body {
  background-color: #282032;
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  overflow-y: hidden;
}

.navbar-container {
  width: 100%;
  position: sticky; /* 🔹 AHORA SE MUEVE CON EL SCROLL */
  top: 0;
  left: 0;
  background: #282032;
  padding: 10px 0;
  z-index: 1000;
}

Navbar {
  width: 100%;
  display: flex;
  justify-content: space-between;
  padding: 0 20px;
}

.logo-container {
  position: absolute;
  top: 20px;
  left: 50%;
  transform: translate(-50%, -20%);
  z-index: 1001; /* Más alto que la NavBar */
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  gap: 20px; /* Espacio entre elementos */
}

.logo-container img {
  width: 120px; /* Ajustar tamaño si es necesario */
  height: auto;
}

/* Contenedor principal */
.main-container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr; /* Tres columnas iguales */
  align-items: center;
  justify-items: center;
  height: 100vh; /* Ocupa toda la pantalla */
}

/* Columna izquierda (Selector de aspecto) */
.left-column {
  display: flex;
  justify-content: center;
  align-items: center;
}

/* Columna central (Logo, Input y Botón) */
.center-column {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 20px; /* Espacio entre elementos */
}

/* Contenedor del formulario */
.form-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px; /* Espacio entre el input y el botón */
}

.right-column {
  position: relative; /* Necesario para que los elementos absolutos se posicionen dentro de esta columna */
  height: 100%; /* Asegura que ocupe toda la altura disponible */
}

.season-pass-button {
  position: absolute; /* Posiciona el botón de forma absoluta */
  top: 50vh; /* Coloca el botón al 50% de la altura del viewport */
  left: 50%; /* Centra horizontalmente */
  transform: translate(-50%, -50%); /* Ajusta el centrado */
}

.footer-links-buttons {
  position: fixed; /* Cambiado de absolute a fixed para mejor posicionamiento */
  bottom: 5vh; /* Mantiene la posición en la parte inferior */
  left: 50%; /* Centra horizontalmente */
  transform: translateX(-50%); /* Solo transformación horizontal */
  width: 100%; /* Ancho completo para asegurar espacio suficiente */
  max-width: 1200px; /* Limita el ancho máximo para pantallas grandes */
  display: flex; /* Mantiene flexbox */
  justify-content: center; /* Mantiene centrado horizontal */
  flex-wrap: nowrap !important; /* Fuerza que no haya wrapping */
  gap: 10px; /* Reduce el espacio entre elementos para que quepan mejor */
  overflow-x: auto; /* Permite scroll horizontal si es necesario */
  padding: 0 20px; /* Añade padding a los lados */
}

.footer-links-buttons a {
  white-space: nowrap; /* Evita que los textos de los enlaces se rompan */
  flex-shrink: 0; /* Evita que los elementos se reduzcan */
}
/* Botón de Play ajustado */
button {
  font-size: 16px;
  padding: 10px 20px;
  border-radius: 5px;
  border: none;
  cursor: pointer;
}
</style>


